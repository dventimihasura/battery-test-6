* What

This repository provides a self-contained bench-marking load-test
script for [[https://hasura.io/][Hasura]].  It addresses the following question.

#+begin_quote
What is an estimate on the through-put of Hasura under load, under
ideal circumstances?
#+end_quote

*** Definitions

- through-put :: the number or requests-per-second (RPS) without
  errors sustainable by Hasura
- under load :: the load driver k6 is run as a load test and with a
  sufficiently high number of virtual users to saturate Hasura
- saturate :: A server is saturated when the rate of responses it
  provides without error no longer increases as the rate of requests
  increases.
- ideal circumstances :: The test issues GraphQL queries only, without
  mutations or subscriptions.  The metadata is never reloaded.  The
  database (both for data and for metadata) is on a different host
  from Hasura.  Moreover, the database is provisioned on
  vertically-scaled infrastructure with capacity well beyond what
  Hasura can utilize, to ensure that database does not become part of
  the System Under Test (SUT).

* Why

Hasura's through-put (and latency) are partially determined by the
available compute resources.  It is worthwhile to obtain evidence for
how through-put (and potentially latency) relate to the available
compute resources.  This evidence can be used to model how well Hasura
uses additional compute resources that are made available, and can be
used to guide infrastructure, provisioning, and cost estimates for
Hasura. 

* How

This repository comprises a [[file:docker-compose.yaml][docker-compose.yaml]] file to launch the
System Under Test (SUT), a small bootstrap Hasura metadata file
[[file:config.json][config.json]], a [[https://k6.io/][k6]] test script [[file:test_1.js][test_1.js]], and a Bash script
[[file:test.bash][test.js]] which orchestrates the benchmark.

The SUT defined by the [[file:docker-compose.yaml][docker-compose.yaml]] file has just one service.

- graphql-engine-1 :: instance hosting a Hasura GraphQL API for a set
  of tracked tables

*NOTE*:  The [[file:config.json][config.json]] metadata file actually is superfluous and
may be removed in a future version.

- [ ] TODO: Remove the [[file:config.json][config.json]] file.

The [[file:test_1.js][test_1.js]] script uses [[https://k6.io/][k6]] to query a random top-level field,
corresponding to a random table.  The actual query, and the data that
it should return, are very small.  The output is only an ~Int id~
field and a ~String name~ field.

The database tables and their data are generated programmatically.
Consequently, the number of tables can be parameterized with the
environment variable ~N~.

*NOTE*:  Currently, while the number of tables and top-level GraphQL
fields can be configured by the environment variable ~N~, that
parameter currently is not captured in the data that are written to
the output log files.

- [ ] TODO: Capture the parameter ~N~ into the output log files.
- [ ] TODO: Parameterize the width of the ~String name~ field.
- [ ] TODO: Parameterize the volume of data generated into the tables.
- [ ] TODO: Add periodic metadata reload operations to the test script.
- [ ] TODO: parameterize the frequency of metadata reload operations.

* Steps

*** Local Testing

1. Clone this repository.
2. Install [[https://docs.docker.com/get-docker/][Docker]] and [[https://docs.docker.com/compose/install/][Docker Compose]].
3. Install [[https://k6.io/docs/get-started/installation/][k6]].
4. Install the [[https://docs.digitalocean.com/reference/doctl/how-to/install/][DigitalOcean CLI]].
5. Run the test script in the ~battery-test-6~ directory.

   #+begin_src shell
     export DIGITALOCEAN_TOKEN= # Paste in your DigitalOcean API token.
     export SSH_KEYID= # Paste in your DigitalOcean SSH Key ID.
     bash test.bash
   #+end_src
   
*** Remote Testing

1. Clone the [[https://github.com/hasura/battery][battery]] repository.
2. Install the [[https://docs.digitalocean.com/reference/doctl/how-to/install/][DigitalOcean CLI]].
3. Install [[https://www.gnu.org/software/make/][Make]].
4. Run the test harness Make target with the test script repository
   URL in the ~battery~ directory.

   #+begin_src shell
     export DIGITALOCEAN_TOKEN= # Paste in your DigitalOcean API token.
     export SSH_KEYID= # Paste in your DigitalOcean SSH Key ID.
     export GIT_URL=https://github.com/dventimihasura/battery-test-6.git
     make up
   #+end_src

#  LocalWords:  SUT Hasura's config json TODO programmatically src
#  LocalWords:  DigitalOcean KEYID
